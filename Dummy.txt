--은행테이블
DROP TABLE tbl_bank;
CREATE TABLE tbl_bank(
  bno NUMBER PRIMARY KEY,
  bname VARCHAR2(50) NOT NULL,
  pw VARCHAR2(50) NOT NULL,
  money NUMBER DEFAULT 0,
  regdate DATE DEFAULT SYSDATE
);

DROP SEQUENCE seq_bank;
CREATE SEQUENCE seq_bank
    START WITH 101
    INCREMENT BY 1
    NOCYCLE;
    
INSERT INTO tbl_bank(bno,bname,pw)
VALUES(seq_bank.NEXTVAL,'김행화','1234');
INSERT INTO tbl_bank(bno,bname,pw)
VALUES(seq_bank.NEXTVAL,'정우영','4567');
INSERT INTO tbl_bank(bno,bname,pw)
VALUES(seq_bank.NEXTVAL,'김예슬','7890');
INSERT INTO tbl_bank(bno,bname,pw)
VALUES(seq_bank.NEXTVAL,'나솔애','1111');
INSERT INTO tbl_bank(bno,bname,pw)
VALUES(seq_bank.NEXTVAL,'양시윤','2222');

COMMIT;
SELECT * FROM tbl_bank;

-- 게시판 테이블
DROP TABLE tbl_board;
CREATE TABLE tbl_board(
    bno NUMBER PRIMARY KEY,  
    title VARCHAR2(200) NOT NULL,
    content VARCHAR2(500) NOT NULL,
    writer VARCHAR2(100) NOT NULL,
    viewcnt NUMBER DEFAULT 0, -- 최초 게시글 등록시 조회수 0부터 시작
    regdate DATE DEFAULT SYSDATE
);
CREATE SEQUENCE seq_board
    START WITH 1
    INCREMENT BY 1
    NOCYCLE;
    

SELECT * FROM tbl_board;

--1. 등록
INSERT INTO tbl_board(bno,title,content,writer)
VALUES(seq_board.NEXTVAL,'본보야지 4 봄?','너무 귀여워','아미1');
INSERT INTO tbl_board(bno,title,content,writer)
VALUES(seq_board.NEXTVAL,'태형아','생일축하해','윈터베어');
INSERT INTO tbl_board(bno,title,content,writer)
VALUES(seq_board.NEXTVAL,'구오즈 우정목걸리','어느 브랜드꺼인가요','구오즈만세');
INSERT INTO tbl_board(bno,title,content,writer)
VALUES(seq_board.NEXTVAL,'2020윈터패키지','역대급화보임','스프링패키지원함');
INSERT INTO tbl_board(bno,title,content,writer)
VALUES(seq_board.NEXTVAL,'내년 한콘하냐','빅힛 제발 일해라','아미총연합');



-- 2.수정
UPDATE tbl_board
    SET title = '본보 시즌4',
        content = '미치도록 귀엽다',
        writer = '월드스타BTS'
WHERE bno = 1;    

COMMIT;
SELECT * FROM tbl_board;

--3.삭제
DELETE tbl_board
WHERE bno = 5;

SELECT * FROM tbl_board;

ROLLBACK;

--4.전체조회
SELECT * FROM tbl_board;


--5. title과 content에서 '윈'글자 검색
SELECT * FROM tbl_board
WHERE title LIKE '%윈%' OR
content  LIKE '%윈%';

--6.오름차순 정렬
SELECT * FROM tbl_board
ORDER BY viewcnt DESC;

--7.게시물 번호로 조회( 상세게시글)
SELECT * FROM  tbl_board
WHERE bno = 1;

--조회수 증가
UPDATE tbl_board
    SET viewcnt = viewcnt + 1
WHERE bno = 1;    

--멤버 테이블
CREATE TABLE tbl_member(
    id VARCHAR2(50) PRIMARY KEY,
    pw VARCHAR2(100) NOT NULL,
    name VARCHAR2(100) NOT NULL,
    phone VARCHAR2(100) NOT NULL,
    regdate DATE DEFAULT SYSDATE
);

INSERT INTO tbl_member(id,pw,name,phone)
VALUES('LoveRM','0912','김남준','010-2018-1022');
INSERT INTO tbl_member(id,pw,name,phone)
VALUES('eatjin','1204','김석진','010-2019-0605');
INSERT INTO tbl_member(id,pw,name,phone)
VALUES('AgustD','0309','민윤기','010-2016-0815');
INSERT INTO tbl_member(id,pw,name,phone)
VALUES('hopeworld','0218','정호석','010-2018-0301');
INSERT INTO tbl_member(id,pw,name,phone)
VALUES('fairyJ','1013','박지민','010-2013-0618');
INSERT INTO tbl_member(id,pw,name,phone)
VALUES('winterbear','1230','김태형','010-2018-0809');
INSERT INTO tbl_member(id,pw,name,phone)
VALUES('goldbaby','0901','전정국','010-2013-0613');

COMMIT;

-- 수정
UPDATE tbl_member
    SET id = 'RainRM'
WHERE name = '김남준';    

UPDATE tbl_member
    SET phone = '010-2019-0809'
WHERE name = '김태형';    

-- 로그인 할 떄 아이디와 비밀번호가 맞는 것을 찾음
SELECT * FROM tbl_member
WHERE id = 'RainRM' AND pw = '0912';

--로그인 유무만 알려고 함, 값을 전달 받으려는 것이 아니기 때문에 COUNT 사용
SELECT COUNT(*) FROM tbl_member
WHERE id = 'hopeworld' AND pw = '0218';

SELECT writer FROM tbl_board
WHERE bno = 2;

SELECT * FROM tbl_member;

-- 편의점테이블
DROP TABLE tbl_product;
CREATE TABLE tbl_product(
    pno NUMBER PRIMARY KEY,
    pname VARCHAR2(100) NOT NULL,
    company VARCHAR2(100) NOT NULL,
    price NUMBER DEFAULT 0,
    cnt NUMBER DEFAULT 0,
    regdate DATE DEFAULT  SYSDATE
);

DROP SEQUENCE seq_product;
CREATE SEQUENCE seq_product
    START WITH 1001
    INCREMENT BY 1
    NOCYCLE;
    
    
SELECT * FROM tbl_product;

--2.제품등록
INSERT INTO tbl_product(pno,pname,company,price,cnt)
VALUES(seq_product.NEXTVAL,'에이스초콜라또',해태,4800,30);
INSERT INTO tbl_product(pno,pname,company,price,cnt)
VALUES(seq_product.NEXTVAL,'마가렛트','롯데',4000,11);
INSERT INTO tbl_product(pno,pname,company,price,cnt)
VALUES(seq_product.NEXTVAL,'스프라이트','코카콜라',1500,20);
INSERT INTO tbl_product(pno,pname,company,price,cnt)
VALUES(seq_product.NEXTVAL,'팔도비빔면','팔도',3500,35);

COMMIT;

--3.제품수정
UPDATE tbl_product
    SET company = 'paldo',
        price = 4000,
        cnt = 40
WHERE pname = '팔도비빔면'

COMMIT;
SELECT * FROM tbl_product;

--4. 제품삭제
DELETE tbl_product
WHERE pname= '마가렛트';

--5. 제품조회
SELECT * FROM tbl_product;

--6. 제품검색
SELECT * FROM tbl_product
WHERE pname LIKE '%마%';

SELECT COUNT(*) FROM tbl_product
WHERE pname LIKE '%오%';

SELECT COUNT(*) FROM tbl_product
WHERE pname LIKE '%마%';



-- 매출 테이블 
DROP TABLE tbl_sale;
CREATE TABLE tbl_sale(
    sno NUMBER PRIMARY KEY,
    sname VARCHAR2(100) NOT NULL,
    cnt NUMBER NOT NULL,
    tprice NUMBER NOT NULL,
    regdate DATE DEFAULT SYSDATE
);

CREATE SEQUENCE seq_sale
    START WITH 1001
    INCREMENT BY 1
    NOCYCLE;




DELETE tbl_sale
WHERE sno = 1001;

--매출
INSERT INTO tbl_sale(sno,sname,cnt,tprice)
VALUES(SEQ_SALE.nextval,'팔도비빔면',3,3800*3);

DELETE tbl_sale
WHERE sno = 1002;

COMMIT;

SELECT * FROM tbl_sale;

-- 전체 총 판매액
SELECT SUM(tprice) FROM tbl_sale;

-- 제품별 총 판매액
SELECT sname,SUM(tprice) 
FROM tbl_sale
GROUP BY sname;

--To_CHAR : 문자열로 형변환시켜주는 것 
--regdate

--일일 판매한 제품의  총 판매액
SELECT SUM(tprice) FROM tbl_sale
WHERE TO_CHAR(regdate,'YYYYMMDD') = TO_CHAR(SYSDATE,'YYYYMMDD');



--오늘 판매한 상품의 수량과 총 금액
SELECT sname,SUM(cnt),SUM(tprice) 
FROM tbl_sale
WHERE TO_CHAR(regdate,'YYYYMMDD') = TO_CHAR(SYSDATE,'YYYYMMDD')
GROUP BY sname;



DROP TABLE EMP;
DROP TABLE DEPT;
DROP TABLE BONUS;
DROP TABLE SALGRADE;
DROP TABLE DUMMY;
 
CREATE TABLE EMP
       (EMPNO NUMBER(4) PRIMARY KEY,
        ENAME VARCHAR2(10),
        JOB VARCHAR2(9),
        MGR NUMBER(4),
        HIREDATE DATE,
        SAL NUMBER(7, 2),
        COMM NUMBER(7, 2),
        DEPTNO NUMBER(2));
 
INSERT INTO EMP VALUES
        (7369, 'SMITH',  'CLERK',     7902,
        sysdate,  800, NULL, 20);
         
INSERT INTO EMP VALUES
        (7499, 'ALLEN',  'SALESMAN',  7698,
        sysdate, 1600,  300, 30);
         
INSERT INTO EMP VALUES
        (7521, 'WARD',   'SALESMAN',  7698,
        sysdate, 1250,  500, 30);
         
INSERT INTO EMP VALUES
        (7566, 'JONES',  'MANAGER',   7839,
        sysdate,  2975, NULL, 20);
         
INSERT INTO EMP VALUES
        (7654, 'MARTIN', 'SALESMAN',  7698,
        sysdate, 1250, 1400, 30);
         
INSERT INTO EMP VALUES
        (7698, 'BLAKE',  'MANAGER',   7839,
        sysdate,  2850, NULL, 30);
         
INSERT INTO EMP VALUES
        (7782, 'CLARK',  'MANAGER',   7839,
        sysdate,  2450, NULL, 10);
INSERT INTO EMP VALUES
        (7788, 'SCOTT',  'ANALYST',   7566,
        sysdate, 3000, NULL, 20);
         
INSERT INTO EMP VALUES
        (7839, 'KING',   'PRESIDENT', NULL,
        sysdate, 5000, NULL, 10);
         
INSERT INTO EMP VALUES
        (7844, 'TURNER', 'SALESMAN',  7698,
        sysdate,  1500,    0, 30);
         
INSERT INTO EMP VALUES
        (7876, 'ADAMS',  'CLERK',     7788,
        sysdate, 1100, NULL, 20);
         
INSERT INTO EMP VALUES
        (7900, 'JAMES',  'CLERK',     7698,
        sysdate,   950, NULL, 30);
         
INSERT INTO EMP VALUES
        (7902, 'FORD',   'ANALYST',   7566,
        sysdate,  3000, NULL, 20);
         
INSERT INTO EMP VALUES
        (7934, 'MILLER', 'CLERK',     7782,
        sysdate, 1300, NULL, 10);
 
CREATE TABLE DEPT
       (DEPTNO NUMBER(2) PRIMARY KEY,
        DNAME VARCHAR2(14),
        LOC VARCHAR2(13) );
 
INSERT INTO DEPT VALUES (10, 'ACCOUNTING', 'NEW YORK');
INSERT INTO DEPT VALUES (20, 'RESEARCH',   'DALLAS');
INSERT INTO DEPT VALUES (30, 'SALES',      'CHICAGO');
INSERT INTO DEPT VALUES (40, 'OPERATIONS', 'BOSTON');
 
CREATE TABLE BONUS
        (ENAME VARCHAR2(10),
         JOB   VARCHAR2(9),
         SAL   NUMBER,
         COMM  NUMBER);
 
CREATE TABLE SALGRADE
        (GRADE NUMBER,
         LOSAL NUMBER,
         HISAL NUMBER);
 
INSERT INTO SALGRADE VALUES (1,  700, 1200);
INSERT INTO SALGRADE VALUES (2, 1201, 1400);
INSERT INTO SALGRADE VALUES (3, 1401, 2000);
INSERT INTO SALGRADE VALUES (4, 2001, 3000);
INSERT INTO SALGRADE VALUES (5, 3001, 9999);
 
CREATE TABLE DUMMY
        (DUMMY NUMBER);
 
INSERT INTO DUMMY VALUES (0);
 
COMMIT;

SELECT * FROM emp;

--Join 
--1. 둘 이상의 테이블을 연결하여 하나의 가상테이블을 마드는 것
--2. 보통 두 ㄹ이상의 행들의 공통된 값 FK 및 FK값을 사용하여 조인한다
--3. 두개의 테이블을 SELECT 문장안에 조인하려면 적어도 하나의 컬럼이 그 두 테이블 사이에서 공유 되어야한다
 -- 두개 이상의 테이블을 합치는 것
-- 두 개의 테이블에서 동일한 컬럼이 있어야함
-- 컬럼 안에 값이 같을 때 
--사원내용
SELECT * FROM emp; -- detpno : FK키
--부서내용
SELECT * FROM dept; -- detpno:PK키

SELECT *
FROM dept, emp
WHERE dept.deptno = emp.deptno;

SELECT *
FROM dept, emp
WHERE dept.deptno = emp.deptno;


--JOIN 종류
--1.Equi Join(동등조인)
-- 양쪽 테이블에 값이 있어야 작동, 한곳에라도 값이 없으면 결과가 나오지 않음
-- ex) dept테이블과 emp 테이블을 조인

SELECT emp.empno, emp.ename as 사원이름, dept.dname
FROM dept, emp 
WHERE dept.deptno = emp.deptno;

--ALIAS : 테이블 이름을 간단하게 만들어줌
SELECT e.empno, e.ename as 사원이름, d.dname
FROM dept d, emp e
WHERE d.deptno = e.deptno;
-- dept의 deptno 와 emp의 deptno 똑같은 값을 찾아라

--2.Inner Join == Equi Join
--ex) dept테이블과 emp 테이블을 Inner조인
-- , 대신에 Inner Join을 사용 (Inner 생략 가능)
-- WHERE절이 ON절 → JOIN의 조건
SELECT e.empno, e.ename, d.dname
FROM dept d
INNER JOIN emp e
ON d.deptno = e.deptno;

-- 3. Natural Join == Equi Join 
--ex) dept테이블과 emp 테이블을 Natural조인
-- 동일한 컬럼을 내부적으로 모두 조인, ON절(동등조건)이 생략가능
--  장점: 자동으로 같은 값을 찾아서 묶어줌
--  단점: 같은 컬럼이 두개 이상이 되면 두개 다 묶어버림
-- Natural과 Using은 같이 사용이 불가능
-- Natural Join에서 Using절을 사용 하고 싶으면 Inner Join으로 변경하고 사용해야함
-- Natural Join을 Inner Join으로 변강하는 방법은 Natural만 지우면 된다
SELECT e.empno , e.ename , d.dname
FROM dept d
NATURAL JOIN emp e;
--Using(deptno); 동일한 이름을 가지는 컬럼은 모두 조인 됨으로 Using을 사용하면 컬럼을 선택해서 조인 가능
-- Natural Join의 WHERE의 역할을 해줌
-- 

--4. Non-Equi Join
-- 테이블의 어떤 컬럼도 Join 할 테이블의 컬럼과 일치하지 않을 때
-- 조인조건은 동등(=) 이외의 연산자를 사용합니다
-- BETWEEN AND, IS NULL, IS NOT NULL,IN,NOT IN
-- 거의 사용하지않는다 

--연봉 등급: 등급별 연봉최저액 ~ 최고액
SELECT * FROM salgrade; 
--ex) emp테이블과 salgrade테이블의 Non-Equi Join
SELECT e.ename, e.sal, s.grade
FROM emp e, salgrade s
WHERE e.sal
BETWEEN s.losal
AND s.hisal;
-- e.sal이 s.losal


--5. Self Join
-- Equi Join과 같으나 하나의 테이블에서 조인이 일어난다는 것이 다르다
-- 같은 테이블에 대해 두개의 alias를 사용하여, FROM 절에 두개의 테이블 사용하는 것처럼 조인한다.
-- ex)사원의 매니저이름을 조회하는 Self Join
-- 나랑 나를 자가 복제 해서 사용

SELECT e.ename, a.ename as Manager
FROM emp e, emp a
WHERE e.empno = a.mgr;
SELECT * FROM emp;

-- 6. Cross join =Cartesian Product
-- 컬럼을 곱해서 모든 경우의 수를 띄워주는 것
-- 검색하고자했던 데이터뿐 아니라 조인에 사용된 테이블들의 모든 데이터가 반환되는 현상
-- Cartesian Product 는 조인 조건을 정의하지 않은 경우 발생
-- CROSS JOIN을 사용하면 Cartesian Product 값을 얻을 수 있음
-- ex) CROSS JOIN 절을 이용하여 Cartesian Product 값을 얻는 예제
SELECT e.empno, e.ename, d.dname
FROM dept d CROSS JOIN emp e;
-- emp 14개 dept 14개 → 14 x 4 = 56건 출력

--7. Outer Join
--한쪽에 값이 없더라도 값이 나오게 해주는 것
--Equi Join은 조인을 생성하려는 두 개의 테이블의 한쪽 컬럼에서 값이 없다면 데이터를 반환하지 못함
--동일 조건에서 조인 조건을 만조갛는 값이 없는 행등르 조회하기 위해 Outer Join 을 사용
--Outer Join 연산자는 (+)이다
--조인시 값이 없는 조인측에 (+)를 위치 시킨다
--Outer Join 연산자는 표현식의 한편에만 올 수 있다.
--ex) Equi Join과 Outer Join의 비교
-- ex1) Equi Join으로 부서번호를 조회
SELECT DISTINCT(e.deptno), d.deptno, d.dname
FROM emp e, dept d
WHERE e.deptno = d.deptno;
 
--ex)  Outer Join으로 부서번호를 조회
-- e.deptno(+) : emp의 deptno테이블에서 값이 없어도 출력해주세요
SELECT DISTINCT(e.deptno), d.deptno, d.dname
FROM emp e,dept d
WHERE e.deptno(+) = d.deptno;

--ex3) LEFT OUTER JOIN (left에 값이 다 있는것)
SELECT DISTINCT(e.deptno), d.deptno, d.dname
FROM dept d
LEFT OUTER JOIN emp e
ON d.deptno = e.deptno;

--ex4) LIGHT OUTER JOIN(right쪽에 값이 다 있는것)
SELECT DISTINCT(e.deptno), d.deptno, d.dname
FROM emp e
RIGHT OUTER JOIN dept d
ON e.deptno = d.deptno;

--ex5) FULL OUTER JOIN
SELECT DISTINCT(e.deptno), d.deptno, d.dname
FROM emp e
FULL OUTER JOIN dept d
ON e.deptno = d.deptno;


SELECT * FROM DUAL;

--Commit과 Rollback
--DCL(TCL) : 트랜잭션
--SAVEPOINT a
--ROLLBACK TO a;






--Oracle 내장함수

-- : DUAL 테이블 
--   1.Oracle 에서 자체적으로 제공하는 테이블
--   2.간단하게 함수를 이용해서 계산 결과값을 확인 할 떄 사용 
--   3.SYS사용자(신급권한)가 소유하는 Oracle의 표준 테이블
--   4.SYS사용자가 소유하지만 어느 사용자든 접근가능
--   5.오직 한행, 한컬럼만 담고 있는 dummy테이블   
-- : Dual 테이블 사용용도
--  1. 사용자가 함수(계산)를 실행할 떄 임시로 사용하는데 적합
--  2. 함수에 대한 쓰임을 알고 싶을 떄 특정테이블 생성없이 dual을 사용하면 return 받을 수 있음

--  ex)현재시간 출력
SELECT SYSDATE FROM DUAL;

SELECT 
-- ex) 시퀀스 현재번호 출력
SELECT seq_sale.CURRVAL FROM DUAL;

-- ex) 시퀀스 다음번호 출력
SELECT seq_sale.NEXTVAL FROM DUAL;

--숫자형 함수
--1. ABS 절대값을 반환하는 함수
SELECT ABS(-1.234) absolute FROM DUAL;

-- 2.CEIL 올림값을 반환하는 함수
SELECT CEIL(10.1234) FROM DUAL;

--3. FLOOR 버림값을 반환하는 함수
SELECT FLOOR(10.1234) FROM DUAL;

--4.MOD 함수를 m을 n으로 나눈 나머지 반환, n이 0일 경우 m을 반환
SELECT MOD(9, 4) FROM DUAL;

--5. ROUND n값의 반올림을 하는 함수로 m은 소숫점 아래 자릿수를 나타냄
SELECT ROUND(192.153,1) FROM DUAL;
SELECT ROUND(192.153,-1) FROM DUAL;

--6.TRUNC n값을 절삭하는 함수 m은 소숫점 아래 자릿수를 나타냄
SELECT TRUNC(7.5997,2) FROM DUAL;
SELECT TRUNC(789.5597, -2) FROM DUAL;

--문자열 함수
--1. CONCAT 두 문자를 결합, '||' ← LIKE절 
-- CONCAT :자바에 있음
--'%' || keyword || '%' → '%keyword%'
SELECT CONCAT('www.','oracle.')|| 'com' FROM DUAL;

--2.INITCAP(char), LOWER(char), UPPER(char)
-- INITCAP : 주어진 문자열의 첫번째 문자를 대문자로 변환
-- LOWER : 주어진 물자열을 소문자로 변환
-- UPPER :  주어진 문자열을 대문자로 변환
SELECT INITCAP('oracle') name FROM DUAL
SELECT LOWER('oracle') name FROM DUAL;
SELECT UPPER('oracle') name FROM DUAL;

--3. LENGTH(char), LENGTHB(char)
-- 문자열의 길이를 반환
SELECT LENGTH ('오라클자바') len FROM DUAL; -- 결과: 5(순수 글자수)
SELECT LENGTHB('오라클자바') len FROM DUAL; -- 결과: 15(글자바이트수,한글자당 3byte)

--4. REPLACE(char1,str1,str2)
--문자열의 특정문자를 다른 문자로 변환
SELECT REPLACE('오라클자바','오라클','파이썬') FROM DUAL;

--5. INSTR(char1, str1, m, n)
--문자열이 포함되어 있는지 조사하여 문자열의 위치를 반환, ㅁ분자열이 발견되지 않으면 0 반환
--char1 : 지정문자 str1 : 검색문자 , m: 시작위치 , n:검색순위
SELECT INSTR('CORPORATE FLOOR','OK') FROM DUAL;
SELECT INSTR('CORPORATE FLOOR','OR') FROM DUAL;
SELECT INSTR('CORPORATE FLOOR','OR', 3, 2) idx FROM DUAL;
--                                3은 글자의 세번째부터 검색을 시작, OR 이라는 단어를 검색하는데, OR을 검색시 2번째로 검색되는 것

--6. TRIM
-- 특정한 문자를 제거, 제거할 문자를 입력하지 않으면 기본적으로 공백이 제거
-- 좌우공백 제거하는 용도로 많이 쓰임
SELECT TRIM('        오라클자바  ') FROM DUAL;

-- 집계함수
--1. GROUP BY절을 이용하여 그룹 당 하나의 결과로 그룹화 할 수 있다
--2. HAVING절을 사용하여 집계함수를 이용한 조건 비교를 할 수 있다
--3. MIN,MAX 함수는 모든 자료형에 사용 할 수 있다
-- ※ 집계함수는 SELECT나 HAVING절에만 쓸 수 있음

--1. COUNT : 검색된 행의 수를 반환
SELECT COUNT(deptno) FROM dept;

--2.MAX :최대값 반환
SELECT MAX(sal) salary FROM emp;

--3.MIN :최소값반환
SELECT MIN(sal) salary FROM emp;

--4.SUM : 합을 반환
SELECT SUM(sal) salary
FROM emp
WHERE deptno = 30;

--5. STDDEV : 표준편차
SELECT ROUND(STDDEV(sal), 3) salary
FROM emp
WHERE deptno =30;

--집계함수 예 

SELECT deptno 부서번호, COUNT(*) 사원수,
       MAX(sal) 최대급여, MIN(sal) 최소급여,
        SUM(sal) 급여합계, ROUND(AVG(sal)) 평균급여
FROM emp
GROUP BY deptno
ORDER BY SUM(sal) DESC;

--SELECT의 GROUP BY절
--1. 데이터를 원하는 그룹으로 나눌 수 있음
--2. 나누고자 하는 그룹의 컬럼명을 SELECT절과 GROUP BY절 뒤에 추가하면됨
--3. 집계함수와 함께 사용되는 상수는 GROUP BY절에 추가 하지 않아도 된다

--ex) 부서별 사원수 조회
SELECT '2020년' year, deptno 부서번호, COUNT(*) 사원수
FROM emp
GROUP BY deptno
ORDER BY COUNT(*) DESC;

--ex) 부서별로 그룹하여 부서번호, 인원수, 급여의 평균, 급여의 합을 조회
SELECT deptno 부서번호, COUNT(*) 인원수, ROUND(AVG(sal)) 급여평균, SUM(sal) 급여합계
FROM emp
GROUP BY deptno

--SELECT의 HAVING
--1. WHERE절에는 집계함수를 사용 할 수 없음
--2. HAVING절은 집계함수를 가지고 조건비교 할 때 사용
--3. HAVING절은 GROUP BY절과 함께 사용

--ex) 사원수가 다섯명이 넘느 부서와 사원수를 조회
SELECT d.dname, COUNT(e.empno) 사원수 
FROM emp e, dept d -- SELECT * FROM emp ;  SELECT * FROM dept ; 
WHERE e.deptno = d.deptno 
GROUP BY dname
HAVING COUNT(e.empno) > 5;

--1. FROM : emp 전체, dept 전체
--2. WHERE : emp테이블의 deptno와 dept테이블의 deptno에 값이 같으면 JOIN(Join된 14건)
SELECT * 
FROM emp e, dept d
WHERE e.deptno = d.deptno;
--3.GROUP BY :Join된 14건의 결과에서 dname 컬럼값으로 그룹핑 ( ACCONTING,RESEARCH, SALES)
SELECT d.dname, COUNT(e.empno)
FROM emp e, dept d
WHERE e.deptno = d.deptno
GROUP BY dname;
--4. HAVING : 그루핑 된 3건의 결과 중 사원수가 5보다 크거나 같은 두개의 그룹(RESEARCH, SALES) 
SELECT d.dname, COUNT(e.empno)
FROM emp e, dept d
WHERE e.deptno = d.deptno
GROUP BY dname
HAVING COUNT(e.empno) >=5
ORDER BY dname;
--5. SELECT :출력하고 싶은 컬럼 지정(사원이름,사원수)



-- 다음 영화 평점을 담기 위한 테이블 생성
DROP TABLE tbl_movie;
CREATE TABLE tbl_movie(
    bno VARCHAR2(10) PRIMARY KEY,
    title VARCHAR2(50) NOT NULL,
    content VARCHAR2(3000),
    writer VARCHAR2(200) NOT NULL,
    score NUMBER DEFAULT 0,
    loc VARCHAR2(100),
    regdate NUMBER   
);

DROP SEQUENCE seq_movie;
CREATE SEQUENCE seq_movie
    START WITH 1
    INCREMENT BY 1
    NOCYCLE;

SELECT * FROM tbl_movie;


--회원테이블
DROP TABLE tbl_member;
CREATE TABLE tbl_member(
    id VARCHAR2(100)PRIMARY KEY,
    pw VARCHAR2(200) NOT NULL,
    name VARCHAR2(100) NOT NULL,
    phone VARCHAR2(50) NOT NULL,
    email VARCHAR2(100) NOT NULL,
    postcode VARCHAR2(30) NOT NULL,
    addr1 VARCHAR2(300) NOT NULL,
    addr2 VARCHAR2(300) NOT NULL,
    useon VARCHAR2(20) NOT NULL,
    primaryon VARCHAR(20) NOT NULL,
    locon VARCHAR2(20) DEFAULT 'false',
    eventon VARCHAR2(20) DEFAULT 'false',
    useyn VARCHAR2(200) DEFAULT 'n',
    regdate DATE DEFAULT SYSDATE
);

INSERT INTO tbl_member(id,pw,name,phone,email,postcode,addr1,addr2,useon,primaryon)
VALUES('admin','1234','관리자','01012345678','admin@gmail.com','12345','광주광역시','광산구','true','true');
INSERT INTO tbl_member(id,pw,name,phone,email,postcode,addr1,addr2,useon,primaryon)
VALUES('hopelove','0218','정호석','01020130613','jhope@gmail.com','0221','광주광역시','광산구','true','true');

DELETE tbl_member
WHERE id = 'lemon';



SELECT * FROM tbl_member;
COMMIT;

